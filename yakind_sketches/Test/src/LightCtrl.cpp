/** Generated by YAKINDU Statechart Tools code generator. */

#include "LightCtrl.h"

/*! \file Implementation of the state machine 'LightCtrl'
*/




LightCtrl::LightCtrl()  :
button_raised(false),
timerService(sc_null),
ifaceOperationCallback(sc_null),
current(),
isExecuting(false)
{
	for (sc_ushort i = 0; i < maxOrthogonalStates; ++i)
		stateConfVector[i] = LightCtrl_last_state;
	
	clearInEvents();
	swapInEvents();
}

LightCtrl::~LightCtrl()
{
}


sc_boolean LightCtrl::isActive() const
{
	return stateConfVector[0] != LightCtrl_last_state;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
sc_boolean LightCtrl::isFinal() const
{
   return false;}

sc_boolean LightCtrl::check() {
	if(timerService == sc_null) {
		return false;
	}
	if (this->ifaceOperationCallback == sc_null) {
		return false;
	}
	return true;
}


void LightCtrl::setTimerService(sc::timer::TimerServiceInterface* timerService)
{
	this->timerService = timerService;
}

sc::timer::TimerServiceInterface* LightCtrl::getTimerService()
{
	return timerService;
}

sc_integer LightCtrl::getNumberOfParallelTimeEvents() {
	return parallelTimeEventsCount;
}

void LightCtrl::raiseTimeEvent(sc_eventid evid)
{
	if ((evid >= (sc_eventid)timeEvents) && (evid < (sc_eventid)(&timeEvents[timeEventsCount])))
	{
		*(sc_boolean*)evid = true;
	}
}


sc_boolean LightCtrl::isStateActive(LightCtrlStates state) const
{
	switch (state)
	{
		case main_region_Light_Off : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_LIGHT_OFF] == main_region_Light_Off
			);
		case main_region_Light_On : 
			return (sc_boolean) (stateConfVector[SCVI_MAIN_REGION_LIGHT_ON] == main_region_Light_On
			);
		default: return false;
	}
}

/* Functions for event button in interface  */
void LightCtrl::raiseButton()
{
	button_raised = true;
	Serial.print("INside");
	Serial.println(button_raised);
}
void LightCtrl::setOperationCallback(OperationCallback* operationCallback)
{
	ifaceOperationCallback = operationCallback;
}

// implementations of all internal functions

/* Entry action for state 'Light On'. */
void LightCtrl::enact_main_region_Light_On()
{
	/* Entry action for state 'Light On'. */
	timerService->setTimer(this, (sc_eventid)(&timeEvents[0]), (5 * 1000), false);
}

/* Exit action for state 'Light On'. */
void LightCtrl::exact_main_region_Light_On()
{
	/* Exit action for state 'Light On'. */
	timerService->unsetTimer(this, (sc_eventid)(&timeEvents[0]));
}

/* 'default' enter sequence for state Light Off */
void LightCtrl::enseq_main_region_Light_Off_default()
{
	/* 'default' enter sequence for state Light Off */
	stateConfVector[0] = main_region_Light_Off;
}

/* 'default' enter sequence for state Light On */
void LightCtrl::enseq_main_region_Light_On_default()
{
	/* 'default' enter sequence for state Light On */
	enact_main_region_Light_On();
	stateConfVector[0] = main_region_Light_On;
}

/* 'default' enter sequence for region main region */
void LightCtrl::enseq_main_region_default()
{
	/* 'default' enter sequence for region main region */
	react_main_region__entry_Default();
}

/* Default exit sequence for state Light Off */
void LightCtrl::exseq_main_region_Light_Off()
{
	/* Default exit sequence for state Light Off */
	stateConfVector[0] = LightCtrl_last_state;
}

/* Default exit sequence for state Light On */
void LightCtrl::exseq_main_region_Light_On()
{
	/* Default exit sequence for state Light On */
	stateConfVector[0] = LightCtrl_last_state;
	exact_main_region_Light_On();
}

/* Default exit sequence for region main region */
void LightCtrl::exseq_main_region()
{
	/* Default exit sequence for region main region */
	/* Handle exit of all possible states (of LightCtrl.main_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case main_region_Light_Off :
		{
			exseq_main_region_Light_Off();
			break;
		}
		case main_region_Light_On :
		{
			exseq_main_region_Light_On();
			break;
		}
		default: break;
	}
}

/* Default react sequence for initial entry  */
void LightCtrl::react_main_region__entry_Default()
{
	/* Default react sequence for initial entry  */
	enseq_main_region_Light_Off_default();
}

sc_integer LightCtrl::react(const sc_integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc_integer LightCtrl::main_region_Light_Off_react(const sc_integer transitioned_before) {
	/* The reactions of state Light Off. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.iface.button_raised)
		{ 
			exseq_main_region_Light_Off();
			ifaceOperationCallback->setLight(true);
			enseq_main_region_Light_On_default();
			react(0);
			transitioned_after = 0;
		} 
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

sc_integer LightCtrl::main_region_Light_On_react(const sc_integer transitioned_before) {
	/* The reactions of state Light On. */
	sc_integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (current.timeEvents.LightCtrl_main_region_Light_On_time_event_0_raised)
		{ 
			exseq_main_region_Light_On();
			ifaceOperationCallback->setLight(false);
			enseq_main_region_Light_Off_default();
			react(0);
			transitioned_after = 0;
		}  else
		{
			if (current.iface.button_raised)
			{ 
				exseq_main_region_Light_On();
				enseq_main_region_Light_On_default();
				react(0);
				transitioned_after = 0;
			} 
		}
	} 
	/* If no transition was taken then execute local reactions */
	if ((transitioned_after) == (transitioned_before))
	{ 
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

void LightCtrl::swapInEvents() {
	current.iface.button_raised = button_raised;
	button_raised = false;
	current.timeEvents.LightCtrl_main_region_Light_On_time_event_0_raised = timeEvents[0];
	timeEvents[0] = false;
}

void LightCtrl::clearInEvents() {
	button_raised = false;
	timeEvents[0] = false;
}

void LightCtrl::microStep() {
	switch(stateConfVector[ 0 ])
	{
		case main_region_Light_Off :
		{
			main_region_Light_Off_react(-1);
			break;
		}
		case main_region_Light_On :
		{
			main_region_Light_On_react(-1);
			break;
		}
		default: break;
	}
}

void LightCtrl::runCycle() {
	/* Performs a 'run to completion' step. */
	printf("hey");
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	swapInEvents();
	Serial.println("Hey");
	printf("hey");
	microStep();
	isExecuting = false;
}

void LightCtrl::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart LightCtrl */
	enseq_main_region_default();
	isExecuting = false;
}

void LightCtrl::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart LightCtrl */
	exseq_main_region();
	isExecuting = false;
}



