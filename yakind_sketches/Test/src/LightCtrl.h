#include <Arduino.h>
/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef LIGHTCTRL_H_
#define LIGHTCTRL_H_

/*!
 * Forward declaration for the LightCtrl state machine.
 */
 class LightCtrl;


#include "..\src\sc_types.h"
#include "..\src\sc_statemachine.h"
#include "..\src\sc_cyclebased.h"
#include "..\src\sc_timer.h"

/*! \file Header of the state machine 'LightCtrl'.
*/


/*! Define indices of states in the StateConfVector */
#define SCVI_MAIN_REGION_LIGHT_OFF 0
#define SCVI_MAIN_REGION_LIGHT_ON 0


class LightCtrl : public sc::timer::TimedInterface, public sc::CycleBasedInterface, public sc::StatemachineInterface
{
	public:
		LightCtrl();
		
		virtual ~LightCtrl();
		
		/*! Enumeration of all states */ 
		typedef enum
		{
			LightCtrl_last_state,
			main_region_Light_Off,
			main_region_Light_On
		} LightCtrlStates;
					
		static const sc_integer numStates = 2;
		
		/*! Raises the in event 'button' that is defined in the default interface scope. */
		void raiseButton();
		
		//! Inner class for default interface scope operation callbacks.
		class OperationCallback
		{
			public:
				virtual ~OperationCallback() = 0;
				
				virtual void setLight(sc_boolean lightOn) = 0;
				
				
		};
		
		/*! Set the working instance of the operation callback interface 'OperationCallback'. */
		void setOperationCallback(OperationCallback* operationCallback);
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		virtual void enter();
		
		virtual void exit();
		
		virtual void runCycle();
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		virtual sc_boolean isActive() const;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		virtual sc_boolean isFinal() const;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		sc_boolean check();
		
		/*
		 * Functions inherited from TimedStatemachineInterface
		 */
		virtual void setTimerService(sc::timer::TimerServiceInterface* timerService);
		
		virtual sc::timer::TimerServiceInterface* getTimerService();
		
		virtual void raiseTimeEvent(sc_eventid event);
		
		virtual sc_integer getNumberOfParallelTimeEvents();
		
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		sc_boolean isStateActive(LightCtrlStates state) const;
		
		//! number of time events used by the state machine.
		static const sc_integer timeEventsCount = 1;
		
		//! number of time events that can be active at once.
		static const sc_integer parallelTimeEventsCount = 1;
		
		
	protected:
		
		
	private:
		LightCtrl(const LightCtrl &rhs);
		LightCtrl& operator=(const LightCtrl&);
		
		sc_boolean button_raised;
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc_ushort maxOrthogonalStates = 1;
		
		sc::timer::TimerServiceInterface* timerService;
		sc_boolean timeEvents[timeEventsCount];
		
		
		LightCtrlStates stateConfVector[maxOrthogonalStates];
		
		
		OperationCallback* ifaceOperationCallback;
		
		typedef struct {
			sc_boolean button_raised;
		}LightCtrlIfaceEvBuf;
		typedef struct {
			sc_boolean LightCtrl_main_region_Light_On_time_event_0_raised;
		}LightCtrlTimeEventsEvBuf;
		typedef struct {
			LightCtrlIfaceEvBuf iface;
			LightCtrlTimeEventsEvBuf timeEvents;
		}LightCtrlEvBuf;
		
		LightCtrlEvBuf current;
		sc_boolean isExecuting;
		
		
		// prototypes of all internal functions
		
		void enact_main_region_Light_On();
		void exact_main_region_Light_On();
		void enseq_main_region_Light_Off_default();
		void enseq_main_region_Light_On_default();
		void enseq_main_region_default();
		void exseq_main_region_Light_Off();
		void exseq_main_region_Light_On();
		void exseq_main_region();
		void react_main_region__entry_Default();
		sc_integer react(const sc_integer transitioned_before);
		sc_integer main_region_Light_Off_react(const sc_integer transitioned_before);
		sc_integer main_region_Light_On_react(const sc_integer transitioned_before);
		void swapInEvents();
		void clearInEvents();
		void microStep();
		
		
		
		
};


inline LightCtrl::OperationCallback::~OperationCallback() {}


#endif /* LIGHTCTRL_H_ */
